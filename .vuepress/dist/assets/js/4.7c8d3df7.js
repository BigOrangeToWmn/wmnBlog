(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{279:function(t,a,s){t.exports=s.p+"assets/img/JAVA1.c2a0680b.png"},280:function(t,a,s){t.exports=s.p+"assets/img/JAVA2.d260364f.png"},281:function(t,a,s){t.exports=s.p+"assets/img/JAVA3.ba174002.png"},282:function(t,a,s){t.exports=s.p+"assets/img/JAVA4.a4f77a20.png"},283:function(t,a,s){t.exports=s.p+"assets/img/JAVA5.9d379ea2.png"},284:function(t,a,s){t.exports=s.p+"assets/img/JAVA6.f0702822.png"},285:function(t,a,s){t.exports=s.p+"assets/img/JAVA7.ebb5b2f4.png"},286:function(t,a,s){t.exports=s.p+"assets/img/JAVA8.b61b48b0.png"},287:function(t,a,s){t.exports=s.p+"assets/img/JAVA9.6f485a7c.png"},288:function(t,a,s){t.exports=s.p+"assets/img/JAVA10.4c5a9d64.png"},289:function(t,a,s){t.exports=s.p+"assets/img/JAVA11.634e4164.png"},290:function(t,a,s){t.exports=s.p+"assets/img/JAVA12.d8d3df5e.png"},382:function(t,a,s){"use strict";s.r(a);var v=s(14),n=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"java辅助键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java辅助键"}},[t._v("#")]),t._v(" Java辅助键")]),t._v(" "),a("p",[t._v("注释：单行 "),a("code",[t._v("ctrl+/")]),t._v("   多行"),a("code",[t._v("ctrl+shift+/")]),t._v("\n快速生成mian()方法："),a("code",[t._v("psvm")]),t._v("\n快速生成输出语句："),a("code",[t._v("sout")]),t._v("\n格式化："),a("code",[t._v("ctrl+alt+L")])]),t._v(" "),a("h2",{attrs:{id:"while循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while循环"}},[t._v("#")]),t._v(" While循环")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v("（布尔表达式）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//循环内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码语句")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v("（布尔表达式）\n")])])]),a("h2",{attrs:{id:"for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[t._v("#")]),t._v(" for循环")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("初始化；布尔表达式；更新"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码语句")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"if-else语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-else语句"}},[t._v("#")]),t._v(" If……else语句")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("布尔表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果布尔表达式的值为true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果布尔表达式的值为false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("布尔表达式 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果布尔表达式 1的值为true执行代码 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("布尔表达式 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果布尔表达式 2的值为true执行代码 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("布尔表达式 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果布尔表达式 3的值为true执行代码 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果以上布尔表达式都不为true执行代码 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"switch语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch语句"}},[t._v("#")]),t._v(" Switch语句")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//语句 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可选 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//语句 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可选 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//你可以有任意数量的case语句 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可选 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//语句 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"character类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#character类"}},[t._v("#")]),t._v(" Character类")]),t._v(" "),a("p",[t._v("用于对单个字符进行操作")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"数组array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组array"}},[t._v("#")]),t._v(" 数组array")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("定义格式：数据类型[] 变量名 "),a("code",[t._v("int[] arr")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("                  数据类型 变量名[] `int arr[]`\n")])])])])]),t._v(" "),a("p",[a("strong",[t._v("数组是存放在连续内存空间上的相同类型数据的集合")])]),t._v(" "),a("ul",[a("li",[t._v("数组的下标是从零开始的")]),t._v(" "),a("li",[t._v("数组的内存空间地址是连续的")]),t._v(" "),a("li",[t._v("数组的元素不可以删除，只能覆盖")])]),t._v(" "),a("p",[a("strong",[t._v("2.  动态初始化")]),t._v("：数据类型[] 变量名 = new 数据类型[数组长度]；")]),t._v(" "),a("p",[a("code",[t._v("Int[] arr = new int[3];")]),t._v("    new:为数组申请内存空间")]),t._v(" "),a("p",[t._v("**静态初始化：**初始化时指定每个数组元素的初始值，有系统决定组长度")]),t._v(" "),a("p",[t._v("****格式：数据类型[] 变量名={数据1，数据2，数据3.。。。}")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("  `Int[] arr={1,2,3,,,}`\n")])])]),a("p",[t._v("****数组初始化时，会为存储空间添加默认值0/0.00/null")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("数组元素访问：")]),t._v(" "),a("p",[t._v("变量访问方式：数组名[索引]")]),t._v(" "),a("p",[t._v("索引的特征：从0开始；连续；每次加1")])]),t._v(" "),a("li",[a("p",[t._v("内存分配：内存地址 数据")]),t._v(" "),a("p",[t._v("栈内存：存储局部变量  局部变量：定义在方法中的变量arr，使用完就会消失")]),t._v(" "),a("p",[t._v("堆内存：存储new出来的内容（实体、对象）")])]),t._v(" "),a("li",[a("p",[t._v("常见问题：数组越界；空指针异常")])]),t._v(" "),a("li",[a("p",[t._v("数组常见操作：获取最值：①定义一个变量用于保存最值；②取数组中第一个数据作为变量的初始值；③与数组中剩余的数据逐个比对；④打印结果")])])]),t._v(" "),a("h2",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("ol",[a("li",[t._v("方法概述： 将具有独立功能的代码块组织成一个整体，使其具有特殊功能的代码集。 方法必须县创建才可以使用；创建完必须要调用才可以使用")]),t._v(" "),a("li",[t._v("方法的定义和调用：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" 方法名（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方法体")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("； "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用 ")]),t._v("\n")])])]),a("ol",[a("li",[a("p",[t._v("带参数方法的定义与调用")]),t._v(" "),a("p",[t._v("定义："),a("code",[t._v("public static void 方法名（数据类型 参数）{....}")])]),t._v(" "),a("p",[t._v("调用：方法名（变量值/变量名）；")]),t._v(" "),a("p",[t._v("注意：方法调用时数据类型和变量名不可以缺少，多参数用，隔开；方法调用时参数的数量与类型必须和定义中的一致。")])]),t._v(" "),a("li",[a("p",[t._v("带返回值方法的定义和调用")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" 数据类型 方法名（参数）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 数据；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[t._v("方法的注意事项：方法不能嵌套定义；void无返回值")]),t._v(" "),a("li",[t._v("方法的通用格式：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" 返回值类型 方法名（参数）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t方法体；\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 数据；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("参数由数据类型和变量名组成；明确有无返回值类型，没有-void，有-数据类型")]),t._v(" "),a("ol",[a("li",[t._v("方法重载：多个方法在同一个类当中；多个方法具有相同的方法名；多个方法的参数不同或类型不同或数量不同")]),t._v(" "),a("li",[t._v("对于引用类型参数，形式参数的改变，影响实际参数的值")])]),t._v(" "),a("h2",{attrs:{id:"输入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入"}},[t._v("#")]),t._v(" 输入")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" sc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("sc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"面向对象基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象基础"}},[t._v("#")]),t._v(" 面向对象基础")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("类和对象")]),t._v(" "),a("p",[t._v("类：类是对现实生活中一类具有共同属性和行为的事物的抽象\n对象：是能够看得到摸得着的真实存在的实体")])]),t._v(" "),a("li",[a("p",[t._v("类的定义")]),t._v(" "),a("p",[t._v("类是java程序的基本组成单位\n类的组成：属性和行为\n属性：在类中通过成员变量来体现（类中方法外的变量）\n行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字）\n类的定义步骤：")]),t._v(" "),a("ul",[a("li",[t._v("定义类")]),t._v(" "),a("li",[t._v("编写类的成员变量")]),t._v(" "),a("li",[t._v("编写类的成员方法")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//成员变量")]),t._v("\n\t变量"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("的数据类型 变量"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("；\n  变量"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("的数据类型 变量"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("；\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//成员方法")]),t._v("\n   方法"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("；\n   方法"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("；\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("对象的使用")]),t._v(" "),a("p",[t._v("创建对象：类名 对象名 = new 类名（）")]),t._v(" "),a("p",[t._v("使用对象：①使用成员变量：对象名.变量名")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("          ②使用成员方法：对象名.方法名（）\n")])])])]),t._v(" "),a("li",[a("p",[t._v("成员变量和局部变量")]),t._v(" "),a("p",[t._v("成员变量：类中方法外的变量")]),t._v(" "),a("p",[t._v("局部变量：方法中的变量")])]),t._v(" "),a("li",[a("p",[t._v("封装")]),t._v(" "),a("p",[t._v("Private关键字：是一个权限修饰符；可以修饰成员；作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问。")]),t._v(" "),a("p",[t._v("针对private修饰的成员变量：")]),t._v(" "),a("ul",[a("li",[t._v("提供“ get变量名()” 用于获取成员变量的值，方法用public修饰")]),t._v(" "),a("li",[t._v("提供“set变量民（参数）”，用于设置成员变量的值，方法用public修饰")])]),t._v(" "),a("p",[t._v("Private使用：一个标准类的编写")]),t._v(" "),a("ul",[a("li",[t._v("把成员变量用"),a("code",[t._v("private")]),t._v("修饰")]),t._v(" "),a("li",[t._v("提供对应的"),a("code",[t._v("getxxx/setxxx（）")]),t._v("方法")])]),t._v(" "),a("p",[t._v("This关键字：修饰变量用于指代成员变量；")]),t._v(" "),a("p",[t._v("封装概述：是面向对象的三大特征之一（封装、继承、多态）；")]),t._v(" "),a("p",[t._v("封装原则：不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private。")]),t._v(" "),a("p",[t._v("封装好处：提高代码安全性；提高代码复用性")])]),t._v(" "),a("li",[a("p",[t._v("构造方法")]),t._v(" "),a("p",[t._v("作用：创建对象")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v("类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n修饰符 类名（参数）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("功能：主要是完成对象数据初始化")])])]),t._v(" "),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("API：（Application Programming Interface）应用程序编程接口")]),t._v(" "),a("p",[t._v("Java API：指的就是JDK中提供的各种功能的Java类")]),t._v(" "),a("p",[t._v("字符串输入：")]),t._v(" "),a("p",[a("code",[t._v("Scanner str=new Scanner(System.in)")])]),t._v(" "),a("p",[a("code",[t._v("String line=str.nextLine()")])])]),t._v(" "),a("li",[a("p",[t._v("String:字符串")]),t._v(" "),a("p",[t._v("字符串不变：字符串在创建之后是不可以更改的")]),t._v(" "),a("p",[t._v("虽然String的值不可变，但他们可以被共享")]),t._v(" "),a("p",[a("code",[t._v("String s4=”abc”;")]),t._v("(直接赋值)")]),t._v(" "),a("p",[t._v("字符串效果上相当于字符数组（"),a("code",[t._v("char[]")]),t._v("）,但是底层原理是字节数组（"),a("code",[t._v("byte[]")]),t._v("）")]),t._v(" "),a("p",[t._v("String类的构造：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(279),alt:"Untitled"}})]),t._v(" "),a("p",[t._v("String对象特点：")]),t._v(" "),a("ul",[a("li",[t._v("通过new创建的字符串对象，每一次new都会申请一个内存空间，虽然内容相同，但是地址值不同。")])])]),t._v(" "),a("li",[a("p",[t._v("字符串的比较")]),t._v(" "),a("p",[a("code",[t._v("“==”")]),t._v("比较：基本类型-比较的是数值是否相同；引用类型-比较的是地址值是否共同（字符串里面"),a("code",[t._v("“==”")]),t._v("为比较地址是否相同）")]),t._v(" "),a("p",[t._v("字符串是对象，比较内容是否相同："),a("code",[t._v("equals()")]),t._v(" "),a("code",[t._v("s1.equals(s2)")])]),t._v(" "),a("p",[t._v("遍历字符串："),a("code",[t._v("str.charAt()")]),t._v("返回指定索引处的char值，字符串索引从0开始；")]),t._v(" "),a("p",[t._v("统计字符串：大写字母："),a("code",[t._v("ch>=’A’&&ch<=’Z’")])]),t._v(" "),a("p",[t._v("小写字母："),a("code",[t._v("ch>=’a’&&ch<=’z’")])]),t._v(" "),a("p",[t._v("数字："),a("code",[t._v("ch>=’0’&&ch<=’9’")])])]),t._v(" "),a("li",[a("p",[t._v("字符串遍历")]),t._v(" "),a("p",[a("code",[t._v("CharAt(int index):")]),t._v("返回指定索引处的char值，字符串的索引也是从0开始的")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("拼接字符串")]),t._v(" "),a("p",[t._v("①定义一个int类型的数组，用静态初始化完成数组元素的初始化")]),t._v(" "),a("p",[t._v("②定义一个方法，用于把int数组中的数据按照规定格式拼接成一个字符串返回，返回值类型String 参数列表int[] arr")]),t._v(" "),a("p",[t._v("③在方法中遍历数组，按照要求进行拼接")]),t._v(" "),a("p",[t._v("④调用方法，用一个变量接收结果")]),t._v(" "),a("p",[t._v("⑤输出结果")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("equals(a,b)")]),t._v(" "),a("td",[t._v("比较字符串的内容，严格区分大小写")])]),t._v(" "),a("tr",[a("td",[t._v("charAt(int index)")]),t._v(" "),a("td",[t._v("返回指定索引处char值")])]),t._v(" "),a("tr",[a("td",[t._v("length( )")]),t._v(" "),a("td",[t._v("返回此字符串的长度")])])])])]),t._v(" "),a("li",[a("p",[t._v("String Builder\nString Builder 是一个可变的字符串类（内容是可变的），可以把他看成是一个容器。\n但是String里面的内容是不可变得。")]),t._v(" "),a("p",[t._v("String Builder的构造方法：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("StringBuilder( )")]),t._v(" "),a("td",[t._v("创建一个空白可变字符串对象，不含任何内容")])]),t._v(" "),a("tr",[a("td",[t._v("StringBuilder(String str)")]),t._v(" "),a("td",[t._v("根据字符串的内容，来创建可变字符串对象")])]),t._v(" "),a("tr",[a("td",[t._v("append(’任意类型’)")]),t._v(" "),a("td",[t._v("添加数据，并返回对象本身")])]),t._v(" "),a("tr",[a("td",[t._v("reverse( )")]),t._v(" "),a("td",[t._v("根据字符串的内容，来创建可变字符串对象")])])])])]),t._v(" "),a("li",[a("p",[t._v("StringBuilder 和 String 相互转换")])])]),t._v(" "),a("p",[a("img",{attrs:{src:s(280),alt:"Untitled"}})]),t._v(" "),a("h2",{attrs:{id:"集合基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合基础"}},[t._v("#")]),t._v(" 集合基础")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("集合的特点：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("ArrayList<E>")]),t._v(":")]),t._v(" "),a("p",[t._v("可调整大小的数组实现")]),t._v(" "),a("p",[a("code",[t._v("<E>")]),t._v("是一种特殊的数据类型，泛型。")])]),t._v(" "),a("li",[a("p",[t._v("ArrayList构造方法和添加方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ArrayList()")]),t._v(" "),a("td",[t._v("创建一个空的集合对象")])]),t._v(" "),a("tr",[a("td",[t._v("add(E e)")]),t._v(" "),a("td",[t._v("将指定的元素追加到此集合末尾")])]),t._v(" "),a("tr",[a("td",[t._v("add(int index,E e)")]),t._v(" "),a("td",[t._v("在此集合中的指定位置插入指定元素")])])])])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  array"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[a("p",[t._v("ArrayList集合常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("remove(Object o)")]),t._v(" "),a("td",[t._v("删除指定的元素，返回删除是否成功")])]),t._v(" "),a("tr",[a("td",[t._v("remove(int index)")]),t._v(" "),a("td",[t._v("删除指定索引处的元素，返回被删除元素")])]),t._v(" "),a("tr",[a("td",[t._v("set(int index,E element)")]),t._v(" "),a("td",[t._v("修改指定索引处的元素，返回被修改的元素")])]),t._v(" "),a("tr",[a("td",[t._v("get(int index)")]),t._v(" "),a("td",[t._v("返回指定索引处的元素")])]),t._v(" "),a("tr",[a("td",[t._v("size()")]),t._v(" "),a("td",[t._v("返回集合中的元素格式")])])])])]),t._v(" "),a("li",[a("p",[t._v("遍历集合")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("Alt+Fn+insert")]),t._v("（自动生成构造方法和get、set方法）\n"),a("code",[t._v("Shift")]),t._v("选中")]),t._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("继承概述")]),t._v(" "),a("p",[t._v("继承是面向对象的三大特征之一。可以使得子类具有父类的属性和方法，还可以子类中重新定义，追加属性和方法")]),t._v(" "),a("p",[t._v("继承的格式：public class 子类名 extends 父类名{}")]),t._v(" "),a("p",[a("code",[t._v("Public class Zi extends Fu{}")])]),t._v(" "),a("p",[t._v("其中：Fu是父类，也被称为基类，超类")]),t._v(" "),a("p",[t._v("Zi是子类，也被称为派生类")]),t._v(" "),a("p",[t._v("继承中子类的特点：")]),t._v(" "),a("p",[t._v("子类可以有父类的内容")]),t._v(" "),a("p",[t._v("子类还可以有自己特有的内容")]),t._v(" "),a("p",[t._v("继承的好处：")]),t._v(" "),a("p",[t._v("提高代码的复用性")]),t._v(" "),a("p",[t._v("提高代码的维护性")]),t._v(" "),a("p",[t._v("继承的弊端：")]),t._v(" "),a("p",[t._v("削弱了子类的独立性")]),t._v(" "),a("p",[t._v("什么时候使用继承？——继承体现的关系：is a（苹果和水果、猫和动物）")]),t._v(" "),a("p",[t._v("继承中变量的访问特点：")]),t._v(" "),a("p",[t._v("子类局部范围找——子类成员范围找——父类成员范围找——如果都没有报错提醒")])]),t._v(" "),a("li",[a("p",[t._v("Super")]),t._v(" "),a("p",[t._v("直接访问是局部的变量")]),t._v(" "),a("p",[t._v("访问本类的成员变量：this")]),t._v(" "),a("p",[t._v("访问父类的成员变量：super")]),t._v(" "),a("p",[t._v("This:代表本类对象的引用")]),t._v(" "),a("p",[t._v("Super：代表父类存储空间的表示（可以理解为父类对象引用）")]),t._v(" "),a("p",[a("img",{attrs:{src:s(281),alt:"Untitled"}})])]),t._v(" "),a("li",[a("p",[t._v("继承中构造方法的访问特点")]),t._v(" "),a("p",[t._v("子类中所有的构造方法默认都会访问父类中的无参的构造方法")]),t._v(" "),a("p",[t._v("（因为子类会继承父类中的数据，可能还会使用父类的数据，所以，子类初始化之前，一定要先完成父类数据的初始化；每一子类构造方法的第一句默认都是super（））")])]),t._v(" "),a("li",[a("p",[t._v("继承中成员方法的访问特点")]),t._v(" "),a("p",[t._v("子类范围找——父类范围找——如果找不到就报错")])]),t._v(" "),a("li",[a("p",[t._v("方法重写")]),t._v(" "),a("p",[t._v("概述：子类中出现了和父类一模一样的方法声明")]),t._v(" "),a("p",[a("code",[t._v("@override")]),t._v("：是一个注解，可以帮助我们检查重写方法声明的正确性")]),t._v(" "),a("p",[t._v("注意事项：私有方法不可以被重写（父类私有成员子类是不可能被继承的）")]),t._v(" "),a("p",[t._v("子类方法访问权限不能更低（public>默认>私有）")]),t._v(" "),a("p",[t._v("Java中继承的注意事项：java中类只支持单继承，不支持多继承")]),t._v(" "),a("p",[t._v("Java中类支持多层继承")]),t._v(" "),a("h2",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Package(文件夹)")]),t._v(" "),a("p",[t._v("对类进行分类管理")]),t._v(" "),a("p",[t._v("包的定义格式：packag 包名（多级包用.分开）")]),t._v(" "),a("p",[t._v("Package come.ithe;")]),t._v(" "),a("p",[t._v("导包：import cn.itcast.teacher(在开头开始导包)")]),t._v(" "),a("p",[t._v("格式：import+包名")])]),t._v(" "),a("li",[a("p",[t._v("权限修饰符")])])]),t._v(" "),a("p",[a("img",{attrs:{src:s(282),alt:"Untitled"}})]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("状态修饰符")]),t._v(" "),a("p",[t._v("Final：可以修饰成员方法（不能被重写），成员变量（常量，不能被赋值），类（该类不可以被继承）")]),t._v(" "),a("p",[t._v("Final修饰局部变量：")]),t._v(" "),a("ul",[a("li",[t._v("修饰基本类型：数据值不可以变")]),t._v(" "),a("li",[t._v("修饰引用类型：地址值不可以改变，但是地址里面的内容是可以改变的")])])])]),t._v(" "),a("p",[t._v("Static：可以修饰成员方法，成员变量（被类的所有对象共享，可以通过类名调用）")]),t._v(" "),a("p",[t._v("Static访问特点")]),t._v(" "),a("p",[t._v("非静态的成员方法：能访问静态的成员变量，能访问非静态的成员变量，能访问静态的成员方法，能访问非静态的成员方法。")]),t._v(" "),a("p",[t._v("静态的成员方法：能访问静态的成员变量；能访问静态的成员方法。")]),t._v(" "),a("p",[t._v("静态成员方法只能访问静态成员")]),t._v(" "),a("h2",{attrs:{id:"多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[t._v("概述：同一对象，对不同时刻表现出来的不同形态")]),t._v(" "),a("p",[t._v("多态的前提和体现：有继承/实现关系；有方法重写；有分类引用指向子类对象。")])]),t._v(" "),a("li",[a("p",[t._v("多态中成员访问特点：")]),t._v(" "),a("p",[t._v("成员变量：编译看左边，执行看左边")]),t._v(" "),a("p",[t._v("成员方法：编译看左边，执行看右边")])]),t._v(" "),a("li",[a("p",[t._v("多态的好处和弊端")]),t._v(" "),a("p",[t._v("好处：提高了程序的扩展性")]),t._v(" "),a("p",[t._v("弊端：不能使用子类的特有功能")])]),t._v(" "),a("li",[a("p",[t._v("多态中的转型")]),t._v(" "),a("p",[t._v("向上转型：从子到父，父类引用指向子类对象")]),t._v(" "),a("p",[t._v("向下转型：从父到子，父类引用转为子类对象")])])])])]),t._v(" "),a("h2",{attrs:{id:"抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[t._v("#")]),t._v(" 抽象类")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("概述：一个没有方法体的方法应该被定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。")]),t._v(" "),a("p",[a("code",[t._v("Public abstract class xxx()")]),t._v(" 抽象类")]),t._v(" "),a("p",[a("code",[t._v("Public abstract void xxx()")]),t._v(" 抽象方法")])]),t._v(" "),a("li",[a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("抽象类和抽象方法必须用abstract关键字修饰")])]),t._v(" "),a("p",[a("code",[t._v("Public abstract class 类名{}")])]),t._v(" "),a("p",[a("code",[t._v("Public abstract void eat()")])]),t._v(" "),a("ul",[a("li",[t._v("抽象类中不一定有抽象方法，但是有抽象方法的类一定是抽象类")]),t._v(" "),a("li",[t._v("抽象类不能实例化，必须通过子类对象实例化，抽象类多态")]),t._v(" "),a("li",[t._v("抽象类的子类，要么重写抽象类中的所有抽象方法，要么是抽象类")])])]),t._v(" "),a("li",[a("p",[t._v("抽象类的成员特点")]),t._v(" "),a("ul",[a("li",[t._v("成员变量：可以是变量也可以是常量")]),t._v(" "),a("li",[t._v("构造方法：有构造方法但是不能实例化（作用是用于子类访问父类数据的初始化）")]),t._v(" "),a("li",[t._v("成员方法：可以有抽象方法（限定子类必须完成某些动作），也可以有非抽象方法（提高代码复用性）")])])])]),t._v(" "),a("h2",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("概述：java中的接口更多的体现在对行为的抽象")])]),t._v(" "),a("li",[a("p",[t._v("特点：接口用关键字interface修饰，"),a("code",[t._v("public interface 接口名{}")])]),t._v(" "),a("p",[t._v("类实现接口用implements表示，"),a("code",[t._v("public class 类名 接口名{}")])]),t._v(" "),a("p",[t._v("接口不能实例化，想要实例化需要参照多态的方式，通过实现类对象实例化（接口多态），多态的形式：具体类多态，抽象类多态，接口多态")]),t._v(" "),a("p",[t._v("接口的实现类，要么重写接口中的所有抽象方法，要么是抽象类")])]),t._v(" "),a("li",[a("p",[t._v("接口的成员特点")]),t._v(" "),a("ul",[a("li",[t._v("成员变量只能是常量，默认修饰符："),a("code",[t._v("public static final")])]),t._v(" "),a("li",[t._v("接口没有构造方法，因为接口主要是对行为进行抽象的，没有具体存在一个类，如果没有父类，默认继承自object类")]),t._v(" "),a("li",[t._v("接口中只有抽象方法，"),a("code",[t._v("public abstract（）")])])])]),t._v(" "),a("li",[a("p",[t._v("类和接口的关系")]),t._v(" "),a("p",[t._v("类和类的关系：继承关系，只能单继承，但可以多层继承")]),t._v(" "),a("p",[t._v("类和接口的关系：实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口")]),t._v(" "),a("p",[t._v("接口和接口的关系：继承关系，可以单继承，也可以多继承")])]),t._v(" "),a("li",[a("p",[t._v("抽象类和接口的区别")])]),t._v(" "),a("li",[a("p",[t._v("形参和返回值")]),t._v(" "),a("ul",[a("li",[t._v("类名作为形参和返回值")])]),t._v(" "),a("p",[t._v("方法的形参是抽象类名，其实需要的是该抽象类的子类对象")]),t._v(" "),a("p",[t._v("方法的返回值是抽象类名，其实返回的是该抽象类的子类对象")]),t._v(" "),a("ul",[a("li",[t._v("接口名作为形参")])]),t._v(" "),a("p",[t._v("方法的形参是接口名，其实需要的是该接口的实现类对象")]),t._v(" "),a("p",[t._v("方法的返回值是接口名，其实返回的是该接口的实现类对象")])])]),t._v(" "),a("h2",{attrs:{id:"内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部类"}},[t._v("#")]),t._v(" 内部类")]),t._v(" "),a("ol",[a("li",[t._v("概述：在一类中定义一个类")]),t._v(" "),a("li",[t._v("格式：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t修饰符 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",[a("li",[a("p",[t._v("内部类的访问特点：内部类可以直接访问外部类的成员，包括私有；外部类要访问内部类成员，必须创建对象。")])]),t._v(" "),a("li",[a("p",[t._v("内部类的分类：在类的成员位置——成员内部类")]),t._v(" "),a("p",[t._v("在类的局部位置——局部内部类")])]),t._v(" "),a("li",[a("p",[t._v("成员内部类的是用格式：外部类名 内部类名 对象名=外部对象.内部类对象；")]),t._v(" "),a("p",[a("code",[t._v("Outer.inner oi=new outer().new inner();")])])]),t._v(" "),a("li",[a("p",[t._v("局部内部类：外部无法直接访问，需要在方法内部创建对象并使用；该类可以直接访问外部类的成员，也可以访问方法内的局部变量。")])]),t._v(" "),a("li",[a("p",[t._v("匿名内部类（前提：存在一个类或者接口，这里的类可以是具体的类也可以是抽象的类）")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 类名或者接口名（）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t重写方法；\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("本质是一个继承了该类或者实现了该接口的子类匿名对象")]),t._v(" "),a("h2",{attrs:{id:"常用api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api"}},[t._v("#")]),t._v(" 常用API")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Math：包含执行基本数字运算的方法:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Math.abs(a)")]),t._v("：取a的绝对值")]),t._v(" "),a("li",[a("code",[t._v("Math.sqrt(a)")]),t._v("：取a的平方根")]),t._v(" "),a("li",[a("code",[t._v("Math.cbrt(a)")]),t._v("：取a的立方根")]),t._v(" "),a("li",[a("code",[t._v("Math.max(a,b)")]),t._v("：取a、b之间的最大值")]),t._v(" "),a("li",[a("code",[t._v("Math.min(a,b)")]),t._v("：取a、b之间的最小值")]),t._v(" "),a("li",[a("code",[t._v("Math.pow(a,b)")]),t._v("：取a的b平方")])])]),t._v(" "),a("li",[a("p",[t._v("System：包含几个有用的类字段和方法，他不能被实例化")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("exit(int status)")]),t._v(" "),a("td",[t._v("终止当前运行的Java虚拟机，非零表示异常终止")])]),t._v(" "),a("tr",[a("td",[t._v("currentTimeMillis()")]),t._v(" "),a("td",[t._v("返回当前时间(以毫秒数为单位)")])])])])]),t._v(" "),a("li",[a("p",[t._v("Object：是类层次结构的根，每个类都可以将Object作为超类。所有类都直接或者间接的继承自该类。")])]),t._v(" "),a("li",[a("p",[t._v("Arrays")]),t._v(" "),a("p",[t._v("排序：将一组数据按照固定的规则进行排序")]),t._v(" "),a("p",[t._v("冒泡排序：对要进行排序的数据中相邻的数据进行两两比较，将较大的数据放在后面，依次对所有的数据进行操作，直至所有数据按照要求完成排序。")]),t._v(" "),a("ul",[a("li",[t._v("如果有n个数据进行排序，总共需要比较n-1次")]),t._v(" "),a("li",[t._v("每一次比较完毕，下一次的比较就会少一个数据参与")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("toString(int[] a)")]),t._v(" "),a("td",[t._v("返回指定数组的内容的字符串表示形式")])]),t._v(" "),a("tr",[a("td",[t._v("sort(int[] a)")]),t._v(" "),a("td",[t._v("按照数字顺序排列指定的数组")])])])])]),t._v(" "),a("li",[a("p",[t._v("基本类型包装类")]),t._v(" "),a("p",[t._v("将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据。")]),t._v(" "),a("p",[t._v("常用的操作之一：用于基本数据类型与字符串之间的转换")])])]),t._v(" "),a("p",[t._v("Integer类的概述和使用：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("valueOf(int i)")]),t._v(" "),a("td",[t._v("返回表示指定的int值的Integer实例")])]),t._v(" "),a("tr",[a("td",[t._v("valueOf(String s)")]),t._v(" "),a("td",[t._v("返回一个保存指定值的Interger对象String")])])])]),t._v(" "),a("p",[t._v("int和String的相互转换：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用字符串的加减 "),a("code",[t._v("String s1 =” ”+number(int定义)")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Public static String valueOf(int i);")])]),t._v(" "),a("p",[a("code",[t._v("String s2=String.valueOf(number);")])])]),t._v(" "),a("li",[a("p",[t._v("String——Interger——int")]),t._v(" "),a("p",[a("code",[t._v("Integer i=Integer.valueOf(s);")])]),t._v(" "),a("p",[a("code",[t._v("Int x=i.intValue ();")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Int y=Integer.parseInt(s);")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:s(283),alt:"Untitled"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("自动装箱和拆箱")]),t._v(" "),a("p",[t._v("装箱：把基本数据类型转换为对应的包装类类型")]),t._v(" "),a("p",[t._v("拆箱：把包装类类型转换为对应的基本数据类型")])]),t._v(" "),a("li",[a("p",[t._v("日期类:Date类概述和构造方法：Date代表一个特定的时间，精确到毫秒")])])]),t._v(" "),a("p",[a("img",{attrs:{src:s(284),alt:"Untitled"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(285),alt:"Untitled"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Calendar类")]),t._v(" "),a("p",[t._v("Calendar为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法")]),t._v(" "),a("p",[t._v("Calendar提供了一个类方法getinstance用于获取Calendar对象，初始化：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Calendar")]),t._v(" rightNow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Calendar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Month")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:s(286),alt:"Untitled"}})])])]),t._v(" "),a("h2",{attrs:{id:"异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("JVM默认处理方案")]),t._v(" "),a("p",[t._v("如果程序出现问题，我们没有做任何处理，最终JVM会做默认处理：")]),t._v(" "),a("ul",[a("li",[t._v("把异常的名称，异常原因及异常出现的位置输出在控制台")]),t._v(" "),a("li",[t._v("程序停止执行")])])]),t._v(" "),a("li",[a("p",[t._v("异常处理")]),t._v(" "),a("p",[t._v("异常处理值try----catch----")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t可能出现异常的代码；\n\t       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v("（异常类名 变量名）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t            异常的处理代码；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",[a("li",[a("p",[t._v("Throwable的成员方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("getMessage()")]),t._v(" "),a("td",[t._v("返回此throwable的详细信息字符串")])]),t._v(" "),a("tr",[a("td",[t._v("toString()")]),t._v(" "),a("td",[t._v("返回此可抛出的简短描述")])]),t._v(" "),a("tr",[a("td",[t._v("printStackTrace()")]),t._v(" "),a("td",[t._v("把异常的错误信息输出在控制台")])])])])])]),t._v(" "),a("h2",{attrs:{id:"集合进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合进阶"}},[t._v("#")]),t._v(" 集合进阶")]),t._v(" "),a("p",[t._v("集合的特点：提供了一种存储空间可变的存储模型，存储的数据容量可以随时发生改变。")]),t._v(" "),a("p",[t._v("集合类体系结构：\nClooection 单列（List 可重复；Set 不可重复）\nMap 双列")]),t._v(" "),a("p",[a("img",{attrs:{src:s(287),alt:"Untitled"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Collection")]),t._v(" "),a("p",[t._v("概述：单列集合的顶层接口，表示一组对象，这些对象称为Collection的元素")]),t._v(" "),a("p",[t._v("JDK不提供此接口的任何直接实现，它提供更具体的子接口（List，Set）实现")]),t._v(" "),a("p",[t._v("创建Collection集合的对象：多态的方式；具体的实现类ArrayList")])])]),t._v(" "),a("p",[a("img",{attrs:{src:s(288),alt:"Untitled"}})]),t._v(" "),a("p",[a("code",[t._v("Collection<String> c=new ArrayList<String>();")])]),t._v(" "),a("p",[t._v("Collection集合的遍历：")]),t._v(" "),a("ul",[a("li",[t._v("Iterator迭代器，集合的专用遍历方式")])]),t._v(" "),a("p",[a("code",[t._v("Iterator<E>iterator()")]),t._v(":返回此集合中元素的迭代器，通过集合的iterator()方法得到")]),t._v(" "),a("p",[t._v("常用方法："),a("code",[t._v("E next()")]),t._v(":返回迭代中的下一个元素")]),t._v(" "),a("p",[a("code",[t._v("Boolean  hasNext():")]),t._v("如果迭代具有更多元素，则返回true")]),t._v(" "),a("p",[a("code",[t._v("Iterator<String> it=c.iterator();")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(289),alt:"Untitled"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("List集合概述和特点")]),t._v(" "),a("p",[t._v("List集合概述：有序集合用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素，并搜索列表中的元素。")]),t._v(" "),a("p",[t._v("与Set集合不同，列表通常允许重复的元素。")]),t._v(" "),a("p",[t._v("List集合特点：")]),t._v(" "),a("ul",[a("li",[t._v("有序：存储和取出的元素顺序一致")]),t._v(" "),a("li",[t._v("可重复：存储的元素可以重复")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“ ”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" it"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("List集合的特有方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(290),alt:"Untitled"}})])]),t._v(" "),a("li",[a("p",[t._v("ListIterator（列表迭代器）")]),t._v(" "),a("p",[t._v("通过List集合的"),a("code",[t._v("listator（）")]),t._v("方法得到，所以说它是list集合特有的迭代器")]),t._v(" "),a("p",[t._v("常用方法: "),a("code",[t._v("E next()")]),t._v(":返回迭代中的下一个元素")]),t._v(" "),a("p",[a("code",[t._v("Boolean  hasNext()")]),t._v(":如果迭代具有更多元素，则返回true")]),t._v(" "),a("p",[t._v("逆向遍历 "),a("code",[t._v("E previous();")])]),t._v(" "),a("p",[a("code",[t._v("ListIterator<String> lit=list.listIterator();")])]),t._v(" "),a("p",[a("code",[t._v("Lit.hasPrevious();")])]),t._v(" "),a("p",[a("code",[t._v("Lit.previous();")])])]),t._v(" "),a("li",[a("p",[t._v("增强for循环")]),t._v(" "),a("p",[t._v("增强for：简化数组和Collection集合的遍历")]),t._v(" "),a("p",[t._v("实现Iterable接口的类允许其对象成为增强型for语句的目标")]),t._v(" "),a("p",[t._v("格式：")]),t._v(" "),a("p",[t._v("For(元素数据类型 变量名：数组或者Collection集合){")]),t._v(" "),a("p",[t._v("//使用变量，该变量就是元素")]),t._v(" "),a("p",[t._v("}")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);