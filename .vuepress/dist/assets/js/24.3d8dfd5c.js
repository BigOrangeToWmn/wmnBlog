(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{367:function(t,s,a){t.exports=a.p+"assets/img/vp6.fade81dd.png"},368:function(t,s,a){t.exports=a.p+"assets/img/vp7.026024e0.png"},466:function(t,s,a){"use strict";a.r(s);var r=a(14),h=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前端路由有两种模式-html5的history和hash-默认"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端路由有两种模式-html5的history和hash-默认"}},[t._v("#")]),t._v(" "),s("strong",[t._v("前端路由有两种模式：HTML5的history和hash(默认)")])]),t._v(" "),s("p",[t._v("两种模式本质是不同的底层浏览器技术，但是上层VueRouter做了统一化的封装，因此在开发组件和配置路由的时候使用这两种模式的区别并不大。一般默认是hash模式")]),t._v(" "),s("h2",{attrs:{id:"前端路由的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端路由的原理"}},[t._v("#")]),t._v(" "),s("strong",[t._v("前端路由的原理：")])]),t._v(" "),s("p",[t._v("①可以修改url，但不会引起刷新，从而在不刷新的情况下跳转路由")]),t._v(" "),s("p",[t._v("②监听url变化，根据url渲染对应组件")]),t._v(" "),s("h2",{attrs:{id:"hash模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash模式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("hash模式：")])]),t._v(" "),s("p",[t._v("#后面 hash 值的变化，并"),s("strong",[t._v("不会导致浏览器向服务器发出请求")]),t._v("，浏览器不发出请求，也就不会刷新页面。每次 hash 值的变化，会"),s("strong",[t._v("触发")]),s("code",[t._v("hashchange")]),t._v("这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化。")]),t._v(" "),s("p",[t._v("HashHistory有两个方法：")]),t._v(" "),s("p",[s("code",[t._v("HashHistory.push()将新路由添加到浏览器访问历史的栈顶")])]),t._v(" "),s("p",[s("code",[t._v("HashHistory.replace()替换掉当前栈顶的路由")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(367),alt:"Untitled"}})]),t._v(" "),s("h2",{attrs:{id:"history模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history模式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("history模式：")])]),t._v(" "),s("p",[t._v("因为HTML5标准发布，多了两个 API，"),s("code",[t._v("pushState()")]),t._v("和 "),s("code",[t._v("replaceState()。")]),t._v("通过这两个 API：")]),t._v(" "),s("p",[t._v("（1）可以改变 url 地址且不会发送请求")]),t._v(" "),s("p",[t._v("（2）不仅可以读取历史记录栈，还可以对"),s("strong",[t._v("浏览器历史记录栈进行修改。")])]),t._v(" "),s("p",[t._v("切换历史状态："),s("code",[t._v("back")]),t._v(","),s("code",[t._v("forward")]),t._v(","),s("code",[t._v("go")]),t._v("三个方法")]),t._v(" "),s("h2",{attrs:{id:"hash模式和history模式的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash模式和history模式的区别"}},[t._v("#")]),t._v(" "),s("strong",[t._v("hash模式和history模式的区别：")])]),t._v(" "),s("p",[t._v("前面的hashchange，你"),s("strong",[t._v("只能改变#后面的url片段")]),t._v("。而pushState设置的新URL可以是与当前URL同源的任意URL。")]),t._v(" "),s("p",[t._v("history模式则"),s("strong",[t._v("会将URL修改得就和正常请求后端的URL一样")]),t._v(",如后端没有配置对应/user/id的路由处理，则会返回404错误")]),t._v(" "),s("p",[s("img",{attrs:{src:a(368),alt:"Untitled"}})])])}),[],!1,null,null,null);s.default=h.exports}}]);