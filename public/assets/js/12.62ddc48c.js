(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{447:function(t,s,a){t.exports=a.p+"assets/img/JAVA_jiegou1.b5459cb3.png"},448:function(t,s,a){t.exports=a.p+"assets/img/JAVA_jiegou2.2a14a644.png"},449:function(t,s,a){t.exports=a.p+"assets/img/JAVA_jiegou3.ee6c0b82.png"},450:function(t,s,a){t.exports=a.p+"assets/img/JAVA_jiegou4.3e5d4408.png"},538:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"java数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java数据结构"}},[t._v("#")]),t._v(" "),s("strong",[t._v("Java数据结构")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("栈")]),t._v(" "),s("p",[t._v("数据进入栈模型的过程为：压/进栈")]),t._v(" "),s("p",[t._v("数据离开栈模型的过程为：弹/出栈")]),t._v(" "),s("p",[t._v("栈是一种数据先进后出的模型")])]),t._v(" "),s("li",[s("p",[t._v("队列")]),t._v(" "),s("p",[t._v("数据从后端进入队列模型的过程称为：入队列")]),t._v(" "),s("p",[t._v("数据从前段离开队列模型的过程称为：出队列")])]),t._v(" "),s("li",[s("p",[t._v("数组")]),t._v(" "),s("p",[t._v("查询数据通过索引对位，查询任意数据耗时相同，查询速度快")]),t._v(" "),s("p",[t._v("数组是一种查询快，增删慢的模型")])]),t._v(" "),s("li",[s("p",[t._v("链表")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(447),alt:"Untitled"}})]),t._v(" "),s("p",[t._v("链表是一种增删块的模型（对比数组）\n链表是一种查询慢的模型")]),t._v(" "),s("h2",{attrs:{id:"list集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list集合"}},[t._v("#")]),t._v(" List集合")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("List集合子类特点")]),t._v(" "),s("p",[t._v("List集合常用子类：ArrayList，LinkedList")]),t._v(" "),s("ul",[s("li",[t._v("ArrayList：底层数据结构是数组，查询快，增删慢")])]),t._v(" "),s("p",[s("code",[t._v("ArrayList<String> array=new ArrayList<String>();")])]),t._v(" "),s("ul",[s("li",[t._v("LinkedList：顶层数据结构是链表，查询慢，增删块")])]),t._v(" "),s("p",[s("code",[t._v("LinkedList<String> linklist=new LinkedList<String>();")])])]),t._v(" "),s("li",[s("p",[t._v("LinkedList集合的特有功能")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(448),alt:"Untitled"}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Set集合")]),t._v(" "),s("p",[t._v("Set集合特点：不包含重复元素的集合；没有带索引的方法，所以不能使用普通for循环遍历（增强for）")]),t._v(" "),s("p",[t._v("1、"),s("code",[t._v("Set<String> set=new HashSet<String>();")])]),t._v(" "),s("p",[t._v("2、"),s("code",[t._v("Set.add(“ ”)")])]),t._v(" "),s("p",[t._v("3、增强for遍历")]),t._v(" "),s("p",[t._v("哈希值：是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值。")]),t._v(" "),s("p",[t._v("Object类中有一个方法可以获取对象的哈希值：")]),t._v(" "),s("p",[s("code",[t._v("Public int hashCode():")]),t._v("返回对象的哈希码值（默认情况下，不同对象的哈希值是不相同的）")]),t._v(" "),s("p",[t._v("HashSet集合概述和特点：")]),t._v(" "),s("p",[t._v("底层数据结构是哈希表；")]),t._v(" "),s("p",[t._v("对集合的迭代顺序不作任何保证，不保证存储和取出的元素顺序一致。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HashSet<String> hs=new HashSet<String>();")])]),t._v(" "),s("li",[s("code",[t._v("add(“ ”)")])]),t._v(" "),s("li",[t._v("增强for遍历")])])]),t._v(" "),s("li",[s("p",[t._v("哈希表（数据结构）")]),t._v(" "),s("p",[t._v("元素为链表的数组")])]),t._v(" "),s("li",[s("p",[t._v("LinkedHashSet集合")]),t._v(" "),s("p",[t._v("哈希表和；链表实现的Set接口，具有可预测的迭代次序")]),t._v(" "),s("p",[s("code",[t._v("LinkedHashSet<String> linked=new LinkedHashSet<String>();")])])]),t._v(" "),s("li",[s("p",[t._v("TreeSet集合")]),t._v(" "),s("p",[t._v("元素有序，按照一定的规则进行排序，具体排序取决于构造方法；")]),t._v(" "),s("p",[t._v("TreeSet:根据其元素的自然排序进行排序；")]),t._v(" "),s("p",[t._v("TreeSet(Comparator comparator)：根据指定的比较器进行排序。")]),t._v(" "),s("p",[t._v("（自然排序久石让元素所属的类实现Comparable接口，重写"),s("code",[t._v("ComparableTo()方法）")])]),t._v(" "),s("p",[t._v("不能使用普通for循环遍历；")]),t._v(" "),s("p",[t._v("由于是Set集合，所以不包含重复元素对的集合。")])])]),t._v(" "),s("h2",{attrs:{id:"泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("概述：本质是参数化类型，将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型。")])]),t._v(" "),s("li",[s("p",[t._v("泛型的定义格式：")]),t._v(" "),s("p",[s("code",[t._v("<类型>")]),t._v("：指定一种类型的格式。这里的类型可以看成是形参")]),t._v(" "),s("p",[s("code",[t._v("<类型1，类型2>")]),t._v("：指定多种类型格式。")])]),t._v(" "),s("li",[s("p",[t._v("泛型的好处：把运行时期的问题提前到了编译期间；避免了强制类型转换。")])]),t._v(" "),s("li",[s("p",[t._v("泛型类")]),t._v(" "),s("p",[t._v("定义格式：")]),t._v(" "),s("p",[s("code",[t._v("修饰符 class 类名<类型>{ }")])]),t._v(" "),s("p",[s("code",[t._v("Public class Generic<T>{ }")]),t._v("   (此处T可以随便写为任意表示，常见的如T、E、K、V等形式的参数常用于表示泛型)")]),t._v(" "),s("ol",[s("li",[t._v("泛型方法")])]),t._v(" "),s("p",[s("code",[t._v("Public<T>  void 方法名（T t）{ }")])]),t._v(" "),s("ol",[s("li",[t._v("泛型接口")])]),t._v(" "),s("p",[s("code",[t._v("Public class xxxx<T> implements xxx<T>")]),t._v("{")]),t._v(" "),s("p",[t._v("重写xxx里面的方法")]),t._v(" "),s("p",[t._v("}")])]),t._v(" "),s("li",[s("p",[t._v("类型通配符")]),t._v(" "),s("p",[t._v("类型通配符："),s("code",[t._v("<？>")])]),t._v(" "),s("p",[s("code",[t._v("List<?>")]),t._v("：表示类型位置的List，它的元素可以匹配任何类型")]),t._v(" "),s("p",[t._v("类型通配符上限："),s("code",[t._v("<？extends类型>")])]),t._v(" "),s("p",[s("code",[t._v("List<？extends Number>")]),t._v("：它表示的类型是Number或者子类型")]),t._v(" "),s("p",[t._v("类型通配符下限："),s("code",[t._v("<？super类型>")])]),t._v(" "),s("p",[s("code",[t._v("List<？super Number>")]),t._v("：他表示的类型是Number或者其父类型")])]),t._v(" "),s("li",[s("p",[t._v("可变参数")]),t._v(" "),s("p",[t._v("格式：修饰符 返回值类型 方法名（数据类型。。。。变量名）{}")]),t._v(" "),s("p",[t._v("范例："),s("code",[t._v("public static sum(int….a)")])])]),t._v(" "),s("li",[s("p",[t._v("可变参数的使用")]),t._v(" "),s("p",[t._v("Arrays工具类中有一个静态方法："),s("code",[t._v("public static <T> List<T> asList(T….a):")]),t._v("返回由指定数组支持的固定大小的列表。返回的集合不能做增删操作，可以做修改操作")]),t._v(" "),s("p",[t._v("List接口有一个静态方法："),s("code",[t._v("public static <E> List<E> of(E….elements):")]),t._v("返回任意数量元素的不可变列表")]),t._v(" "),s("p",[t._v("Set接口有一个静态方法："),s("code",[t._v("public static <E> Set<E> of(E….elements)")]),t._v(":返回任意一个包含任意数量元素的不可变集合")])])]),t._v(" "),s("h2",{attrs:{id:"map集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map集合"}},[t._v("#")]),t._v(" Map集合")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Map集合概述：")]),t._v(" "),s("p",[s("code",[t._v("Interface Map<K,V>")]),t._v("  K:键的类型；V：值的类型")]),t._v(" "),s("p",[t._v("将键映射到值的对象；不能包含重复的键；每个键可以映射到最多一个值")]),t._v(" "),s("p",[t._v("创建Map集合对象：多态方式；具体的实现类HashMap")]),t._v(" "),s("p",[s("code",[t._v("Map<String,String> map=new HashMap<String,String>();")])]),t._v(" "),s("p",[s("code",[t._v("Map.put();")])])]),t._v(" "),s("li",[s("p",[t._v("Map集合的基本功能")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(449),alt:"Untitled"}})]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("Map集合的获取功能")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(450),alt:"Untitled"}})]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("Map集合的遍历")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" keyset"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keyset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取所有键的集合")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("For")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("keyset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用增强for遍历")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" vale"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取所有键的值")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" entrySet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取所有键值对对象集合")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("For")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" me"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("entrySet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//增强for循环")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("me"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取键")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("me"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取值")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[t._v("用HashMap统计字符串中字符出现的个数：")]),t._v(" "),s("ul",[s("li",[t._v("键盘录入一个字符")]),t._v(" "),s("li",[t._v("创建HashMap集合，键是Character，值是Integer")]),t._v(" "),s("li",[t._v("遍历字符串，得到每一个字符")]),t._v(" "),s("li",[t._v("拿到的每一个字符作为键到HashMap集合中去找对应的值，看起返回值；")])]),t._v(" "),s("h2",{attrs:{id:"collection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" Collection")]),t._v(" "),s("p",[t._v("是针对集合操作的工具类；\n常用方法：")]),t._v(" "),s("p",[s("code",[t._v("Boolean add（Object e）")]),t._v("向集合中添加元素\n"),s("code",[t._v("int size（）")]),t._v("获取集合元素的个数\n"),s("code",[t._v("void clear（）")]),t._v("清空集合\n"),s("code",[t._v("Boolean contains（Object o）")]),t._v("判断当前集合中是否包含元素o，包含返回true。\n"),s("code",[t._v("boolean remove(Object o)")]),t._v("删除集合中的某个元素\n"),s("code",[t._v("boolean isEmpty()")]),t._v("判断集合是否为空，是返回true\n"),s("code",[t._v("Object[] toArray()")]),t._v("调用这个方法把集合转换成数组")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shuffle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//随机置换")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"io流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io流"}},[t._v("#")]),t._v(" IO流")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("File类")]),t._v(" "),s("p",[t._v("它是文件和目录路径名的抽象表示。")]),t._v(" "),s("p",[t._v("文件和目录是可以通过File封装成对象的")]),t._v(" "),s("p",[t._v("对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名")]),t._v(" "),s("p",[s("code",[t._v("File(String pathname)")]),t._v("：                   根据一个路径得到File对象\n"),s("code",[t._v("File(String parent, String child)")]),t._v(":        根据一个目录和一个子文件/目录得到File对象\n"),s("code",[t._v("File(File parent, String child)")]),t._v(":            根据一个父File对象和一个子文件/目录得到File对象")])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" f1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pathname……"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-----最简单")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" f2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent……"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("child……"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" f3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pathname……"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" f4"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("child……"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("`createNewFile()`    创建一个新的文件 如果存在这样的文件，就不创建了.\n`mkdir()`      创建文件夹 如果存在这样的文件夹，就不创建了 注意这个方法只能创建单层目录 如果创建多层目录得一层一层创建\n`mkdirs()`     创建文件夹,如果父文件夹不存在，会帮你创建出来 可以创建多层目录 当然也可以创建单层目录\n")])])]),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" f1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pathname……"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNewFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdirs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建多级目录")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("code",[t._v("isDirectory()")]),t._v("                判断是否是目录\n"),s("code",[t._v("isFile()")]),t._v("                         判断是否是文件\n"),s("code",[t._v("exists()")]),t._v("                         判断是否存在\n"),s("code",[t._v("canRead()")]),t._v("                       判断是否可读\n"),s("code",[t._v("canWrite()")]),t._v("                     判断是否可写\n"),s("code",[t._v("isHidden()")]),t._v("                     判断是否隐藏\n"),s("code",[t._v("isAbsolute()")]),t._v("                  判断是否使用的是绝对路径\n"),s("code",[t._v("getAbsolutePath()")]),t._v("         获取绝对路径")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("递归")]),t._v(" "),s("p",[t._v("解决递归问题，首先就是要定义一个方法。")]),t._v(" "),s("p",[t._v("递归解决问题的思路：")]),t._v(" "),s("p",[t._v("把一个复杂的问题层层转化为一个与原问题相似的规模娇小的问题来求解")]),t._v(" "),s("p",[t._v("递归解决问题要找到两个内容：")]),t._v(" "),s("ul",[s("li",[t._v("递归出口：否则会出现内存溢出")]),t._v(" "),s("li",[t._v("递归规则：与原问题相似的规模较小的问题")])])]),t._v(" "),s("li",[s("p",[t._v("IO流")]),t._v(" "),s("p",[t._v("IO：输入/输出")]),t._v(" "),s("p",[t._v("流：是对数据传输的总称，数据在设备间的传输称为流，流的本质都是数据传输")]),t._v(" "),s("p",[t._v("IO流分类——按照数据的流向：")]),t._v(" "),s("p",[t._v("输入流：读数据")]),t._v(" "),s("p",[t._v("输出流：写数据")]),t._v(" "),s("p",[t._v("按照数据类型来分：")]),t._v(" "),s("p",[t._v("字节流——字节输入流；字节输出流")]),t._v(" "),s("p",[t._v("字符流——字符输入流；字符输出流")]),t._v(" "),s("p",[t._v("如果数据通过Windows自带的记事本软件打开可以读懂内容，就使用字符流，否则为字节流。")])]),t._v(" "),s("li",[s("p",[t._v("字节流")]),t._v(" "),s("p",[t._v("Inputstream：这个抽象类是表示字节输入流的所有类的超类")]),t._v(" "),s("p",[t._v("OutputStream：这个抽象类是表示字节输出流的所有类的超类")]),t._v(" "),s("p",[t._v("子类名特点：子类名称都是以其父类名作为子类名的后缀")]),t._v(" "),s("p",[t._v("FileOutputStream:文件输出流用于将数据写入File；")]),t._v(" "),s("p",[s("code",[t._v("FileOutputStream(String name)")]),t._v("：创建文件输出流以指定的名称写入文件")]),t._v(" "),s("p",[t._v("//创建字节输出流对象")]),t._v(" "),s("p",[s("code",[t._v("FileOutputStream fos=new FileOutputStream(name:……);")])]),t._v(" "),s("p",[t._v("//将字节写入此文件输出流")]),t._v(" "),s("p",[s("code",[t._v("Fos.write(…);")])]),t._v(" "),s("p",[t._v("//释放资源")]),t._v(" "),s("p",[s("code",[t._v("Fos.close();")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法名")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("write(int b)")]),t._v(" "),s("td",[t._v("将指定的字节写入此文件输出流一次写一个字节数据")])]),t._v(" "),s("tr",[s("td",[t._v("write(byte[] b)")]),t._v(" "),s("td",[t._v("将b.length字节从指定的字节数组写入此文件输出流，一次写一个字节数数据")])]),t._v(" "),s("tr",[s("td",[t._v("write(byte[] b,int off,int len)")]),t._v(" "),s("td",[t._v("将len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流一次写一个字节数组的部分数据")])])])])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bys"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("97")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bys"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("”abcd”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("字节流写数据如何实现换行？\n"),s("code",[t._v("Window:\\r\\n;")]),t._v(" "),s("code",[t._v("Liunx:\\n;")]),t._v(" "),s("code",[t._v("Mac:\\r;")]),t._v("\n字节流写数据如何追加写入？\n"),s("code",[t._v("FileOutputStream fos=new FileOutputStream(name:……….,append:true)")])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("字节流读数据（一次读一个字节数据）")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" by"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" by"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("fis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("While")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("by"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("by"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("By")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("fis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("ol",{attrs:{start:"6"}},[s("li",[s("p",[t._v("字节缓冲流")]),t._v(" "),s("p",[t._v("BufferedOutput：该类实现缓冲输出流。\nBufferedInputStream：创建BufferedInputStream")]),t._v(" "),s("p",[t._v("构造方法：\n字节缓冲输出流："),s("code",[t._v("BufferedOutputStream(OutputStream out)")]),t._v("\n字节缓冲输入流："),s("code",[t._v("BufferedInputStream(InputStream in)")])]),t._v(" "),s("p",[s("code",[t._v("BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(….));")]),t._v(" "),s("code",[t._v("Bos.write(“…”.getBytes());")])]),t._v(" "),s("p",[t._v("基本字节流每次读写一个字节")])]),t._v(" "),s("li",[s("p",[t._v("字符流")])])]),t._v(" "),s("p",[t._v("汉字的存储（汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数）")]),t._v(" "),s("p",[t._v("如果是GBK编码，占用2个字符")]),t._v(" "),s("p",[t._v("如果是UTF-8编码，占用3个字符")]),t._v(" "),s("p",[t._v("字符流=字节流+编码表")]),t._v(" "),s("p",[t._v("字符集：")]),t._v(" "),s("p",[t._v("ASCII：用于显示英语，控制符等，气味表示一个字符，共128个字符")]),t._v(" "),s("p",[t._v("GBXXX：简体中文码表，最常用的GBK，最新的GB18030")]),t._v(" "),s("p",[t._v("Unicode：为表达任意语言的任意字符设计，最常用的UTF-8")]),t._v(" "),s("p",[t._v("编码：")]),t._v(" "),s("p",[s("code",[t._v("Byte[] getBytes()")]),t._v("：使用平台的默认字符集将该String")]),t._v(" "),s("p",[s("code",[t._v("Byte[] getBytes(String charsetName:   )")]),t._v("：使用指定的字符集将String编码为一系列字节")]),t._v(" "),s("p",[t._v("解码：")]),t._v(" "),s("p",[s("code",[t._v("String（byte[] bytes）")]),t._v("：通过使用默认字符集解码指定字节数组")]),t._v(" "),s("p",[s("code",[t._v("String（byte[] bytes charsetName:）")])]),t._v(" "),s("p",[t._v("字符流抽象基类：")]),t._v(" "),s("p",[t._v("Reader：字符输入流的抽象类")]),t._v(" "),s("p",[t._v("Writer：字符输出流的抽象类")]),t._v(" "),s("p",[t._v("字符流和编码解码问题相关的两个类：")]),t._v(" "),s("p",[t._v("InputStreamReader")]),t._v(" "),s("p",[t._v("OutputStreamWriter")])])}),[],!1,null,null,null);s.default=e.exports}}]);